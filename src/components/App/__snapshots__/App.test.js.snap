// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    menuOpen={false}
    toggleMenuVisibility={[Function]}
    totalItems={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Toolbar
          menuOpen={false}
          toggleMenuVisibility={[Function]}
          totalItems={0}
        />,
        <Connect(ProductListContainer) />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "menuOpen": false,
          "toggleMenuVisibility": [Function],
          "totalItems": 0,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-jzJRlG",
        "isStatic": true,
        "rules": Array [
          "
  background-color: ",
          "#F3F3F3",
          ";
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows: 80px auto;
  grid-row-gap: 20px;

  > div:first-child {
    grid-column: 1 / -1;
    grid-row: 1 / 2;
  }

  > div:last-child {
    grid-column: 1 / -1;
    grid-row: 2 / 3;
  }
",
        ],
      },
      "displayName": "styled.div",
      "render": [Function],
      "styledComponentId": "sc-jzJRlG",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Toolbar
            menuOpen={false}
            toggleMenuVisibility={[Function]}
            totalItems={0}
          />,
          <Connect(ProductListContainer) />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "menuOpen": false,
            "toggleMenuVisibility": [Function],
            "totalItems": 0,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-jzJRlG",
          "isStatic": true,
          "rules": Array [
            "
  background-color: ",
            "#F3F3F3",
            ";
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows: 80px auto;
  grid-row-gap: 20px;

  > div:first-child {
    grid-column: 1 / -1;
    grid-row: 1 / 2;
  }

  > div:last-child {
    grid-column: 1 / -1;
    grid-row: 2 / 3;
  }
",
          ],
        },
        "displayName": "styled.div",
        "render": [Function],
        "styledComponentId": "sc-jzJRlG",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
